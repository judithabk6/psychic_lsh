/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef psychic_TYPES_H
#define psychic_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>




class Node;

class Edge;

class Graph;

typedef struct _Node__isset {
  _Node__isset() : labels(false), position(false) {}
  bool labels :1;
  bool position :1;
} _Node__isset;

class Node {
 public:

  static const char* ascii_fingerprint; // = "A2801F02B81B73CF35BAC5309B029DC3";
  static const uint8_t binary_fingerprint[16]; // = {0xA2,0x80,0x1F,0x02,0xB8,0x1B,0x73,0xCF,0x35,0xBA,0xC5,0x30,0x9B,0x02,0x9D,0xC3};

  Node(const Node&);
  Node& operator=(const Node&);
  Node() {
  }

  virtual ~Node() throw();
  std::vector<int32_t>  labels;
  std::vector<double>  position;

  _Node__isset __isset;

  void __set_labels(const std::vector<int32_t> & val);

  void __set_position(const std::vector<double> & val);

  bool operator == (const Node & rhs) const
  {
    if (!(labels == rhs.labels))
      return false;
    if (!(position == rhs.position))
      return false;
    return true;
  }
  bool operator != (const Node &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Node & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Node& obj);
};

void swap(Node &a, Node &b);

typedef struct _Edge__isset {
  _Edge__isset() : dest(false), length(false) {}
  bool dest :1;
  bool length :1;
} _Edge__isset;

class Edge {
 public:

  static const char* ascii_fingerprint; // = "0B663F1913C9C6F43150B524A8B76386";
  static const uint8_t binary_fingerprint[16]; // = {0x0B,0x66,0x3F,0x19,0x13,0xC9,0xC6,0xF4,0x31,0x50,0xB5,0x24,0xA8,0xB7,0x63,0x86};

  Edge(const Edge&);
  Edge& operator=(const Edge&);
  Edge() : dest(0), length(0) {
  }

  virtual ~Edge() throw();
  int32_t dest;
  double length;

  Edge(int32_t d, double l) : dest(d), length(l) {
  }

  _Edge__isset __isset;

  void __set_dest(const int32_t val);

  void __set_length(const double val);

  bool operator == (const Edge & rhs) const
  {
    if (!(dest == rhs.dest))
      return false;
    if (!(length == rhs.length))
      return false;
    return true;
  }
  bool operator != (const Edge &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Edge & rhs) const {
    return (dest<rhs.dest || (dest==rhs.dest && length<rhs.length));
  }

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Edge& obj);
};

void swap(Edge &a, Edge &b);

typedef struct _Graph__isset {
  _Graph__isset() : cluster(false), neighbors(false), nodes(false) {}
  bool cluster :1;
  bool neighbors :1;
  bool nodes :1;
} _Graph__isset;

class Graph {
 public:

  static const char* ascii_fingerprint; // = "7289290673F41D4718449FBB25CEAAB4";
  static const uint8_t binary_fingerprint[16]; // = {0x72,0x89,0x29,0x06,0x73,0xF4,0x1D,0x47,0x18,0x44,0x9F,0xBB,0x25,0xCE,0xAA,0xB4};

  Graph(const Graph&);
  Graph& operator=(const Graph&);
  Graph() {
  }

  virtual ~Graph() throw();
  std::map<int32_t, std::set<int32_t> >  cluster;
  std::map<int32_t, std::set<Edge> >  neighbors;
  std::vector<Node>  nodes;

  _Graph__isset __isset;

  void __set_cluster(const std::map<int32_t, std::set<int32_t> > & val);

  void __set_neighbors(const std::map<int32_t, std::set<Edge> > & val);

  void __set_nodes(const std::vector<Node> & val);

  bool operator == (const Graph & rhs) const
  {
    if (!(cluster == rhs.cluster))
      return false;
    if (!(neighbors == rhs.neighbors))
      return false;
    if (!(nodes == rhs.nodes))
      return false;
    return true;
  }
  bool operator != (const Graph &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Graph & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Graph& obj);
};

void swap(Graph &a, Graph &b);



#endif
