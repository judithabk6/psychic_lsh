#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class Edge:
  """
  Attributes:
   - dest
   - length
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'dest', None, None, ), # 1
    (2, TType.DOUBLE, 'length', None, None, ), # 2
  )

  def __init__(self, dest=None, length=None,):
    self.dest = dest
    self.length = length

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.dest = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.length = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Edge')
    if self.dest is not None:
      oprot.writeFieldBegin('dest', TType.I32, 1)
      oprot.writeI32(self.dest)
      oprot.writeFieldEnd()
    if self.length is not None:
      oprot.writeFieldBegin('length', TType.DOUBLE, 2)
      oprot.writeDouble(self.length)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.dest)
    value = (value * 31) ^ hash(self.length)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Graph:
  """
  Attributes:
   - cluster
   - neighbors
  """

  thrift_spec = (
    None, # 0
    (1, TType.MAP, 'cluster', (TType.I32,None,TType.SET,(TType.I32,None)), None, ), # 1
    (2, TType.MAP, 'neighbors', (TType.I32,None,TType.SET,(TType.STRUCT,(Edge, Edge.thrift_spec))), None, ), # 2
  )

  def __init__(self, cluster=None, neighbors=None,):
    self.cluster = cluster
    self.neighbors = neighbors

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.MAP:
          self.cluster = {}
          (_ktype1, _vtype2, _size0 ) = iprot.readMapBegin()
          for _i4 in xrange(_size0):
            _key5 = iprot.readI32();
            _val6 = set()
            (_etype10, _size7) = iprot.readSetBegin()
            for _i11 in xrange(_size7):
              _elem12 = iprot.readI32();
              _val6.add(_elem12)
            iprot.readSetEnd()
            self.cluster[_key5] = _val6
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.MAP:
          self.neighbors = {}
          (_ktype14, _vtype15, _size13 ) = iprot.readMapBegin()
          for _i17 in xrange(_size13):
            _key18 = iprot.readI32();
            _val19 = set()
            (_etype23, _size20) = iprot.readSetBegin()
            for _i24 in xrange(_size20):
              _elem25 = Edge()
              _elem25.read(iprot)
              _val19.add(_elem25)
            iprot.readSetEnd()
            self.neighbors[_key18] = _val19
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Graph')
    if self.cluster is not None:
      oprot.writeFieldBegin('cluster', TType.MAP, 1)
      oprot.writeMapBegin(TType.I32, TType.SET, len(self.cluster))
      for kiter26,viter27 in self.cluster.items():
        oprot.writeI32(kiter26)
        oprot.writeSetBegin(TType.I32, len(viter27))
        for iter28 in viter27:
          oprot.writeI32(iter28)
        oprot.writeSetEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.neighbors is not None:
      oprot.writeFieldBegin('neighbors', TType.MAP, 2)
      oprot.writeMapBegin(TType.I32, TType.SET, len(self.neighbors))
      for kiter29,viter30 in self.neighbors.items():
        oprot.writeI32(kiter29)
        oprot.writeSetBegin(TType.STRUCT, len(viter30))
        for iter31 in viter30:
          iter31.write(oprot)
        oprot.writeSetEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.cluster)
    value = (value * 31) ^ hash(self.neighbors)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
