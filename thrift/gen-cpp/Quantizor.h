/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Quantizor_H
#define Quantizor_H

#include <thrift/TDispatchProcessor.h>
#include "psychic_types.h"



class QuantizorIf {
 public:
  virtual ~QuantizorIf() {}
  virtual void quantize(Graph& _return, const std::string& graphFile, const std::string& method, const int32_t maxSize, const std::vector<double> & params) = 0;
};

class QuantizorIfFactory {
 public:
  typedef QuantizorIf Handler;

  virtual ~QuantizorIfFactory() {}

  virtual QuantizorIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(QuantizorIf* /* handler */) = 0;
};

class QuantizorIfSingletonFactory : virtual public QuantizorIfFactory {
 public:
  QuantizorIfSingletonFactory(const boost::shared_ptr<QuantizorIf>& iface) : iface_(iface) {}
  virtual ~QuantizorIfSingletonFactory() {}

  virtual QuantizorIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(QuantizorIf* /* handler */) {}

 protected:
  boost::shared_ptr<QuantizorIf> iface_;
};

class QuantizorNull : virtual public QuantizorIf {
 public:
  virtual ~QuantizorNull() {}
  void quantize(Graph& /* _return */, const std::string& /* graphFile */, const std::string& /* method */, const int32_t /* maxSize */, const std::vector<double> & /* params */) {
    return;
  }
};

typedef struct _Quantizor_quantize_args__isset {
  _Quantizor_quantize_args__isset() : graphFile(false), method(false), maxSize(false), params(false) {}
  bool graphFile :1;
  bool method :1;
  bool maxSize :1;
  bool params :1;
} _Quantizor_quantize_args__isset;

class Quantizor_quantize_args {
 public:

  static const char* ascii_fingerprint; // = "27365BBD781C35CAEA33B215D6F0702B";
  static const uint8_t binary_fingerprint[16]; // = {0x27,0x36,0x5B,0xBD,0x78,0x1C,0x35,0xCA,0xEA,0x33,0xB2,0x15,0xD6,0xF0,0x70,0x2B};

  Quantizor_quantize_args(const Quantizor_quantize_args&);
  Quantizor_quantize_args& operator=(const Quantizor_quantize_args&);
  Quantizor_quantize_args() : graphFile(), method(), maxSize(0) {
  }

  virtual ~Quantizor_quantize_args() throw();
  std::string graphFile;
  std::string method;
  int32_t maxSize;
  std::vector<double>  params;

  _Quantizor_quantize_args__isset __isset;

  void __set_graphFile(const std::string& val);

  void __set_method(const std::string& val);

  void __set_maxSize(const int32_t val);

  void __set_params(const std::vector<double> & val);

  bool operator == (const Quantizor_quantize_args & rhs) const
  {
    if (!(graphFile == rhs.graphFile))
      return false;
    if (!(method == rhs.method))
      return false;
    if (!(maxSize == rhs.maxSize))
      return false;
    if (!(params == rhs.params))
      return false;
    return true;
  }
  bool operator != (const Quantizor_quantize_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Quantizor_quantize_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Quantizor_quantize_args& obj);
};


class Quantizor_quantize_pargs {
 public:

  static const char* ascii_fingerprint; // = "27365BBD781C35CAEA33B215D6F0702B";
  static const uint8_t binary_fingerprint[16]; // = {0x27,0x36,0x5B,0xBD,0x78,0x1C,0x35,0xCA,0xEA,0x33,0xB2,0x15,0xD6,0xF0,0x70,0x2B};


  virtual ~Quantizor_quantize_pargs() throw();
  const std::string* graphFile;
  const std::string* method;
  const int32_t* maxSize;
  const std::vector<double> * params;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Quantizor_quantize_pargs& obj);
};

typedef struct _Quantizor_quantize_result__isset {
  _Quantizor_quantize_result__isset() : success(false) {}
  bool success :1;
} _Quantizor_quantize_result__isset;

class Quantizor_quantize_result {
 public:

  static const char* ascii_fingerprint; // = "A5E4978334633512AE3DA234B1F8CA77";
  static const uint8_t binary_fingerprint[16]; // = {0xA5,0xE4,0x97,0x83,0x34,0x63,0x35,0x12,0xAE,0x3D,0xA2,0x34,0xB1,0xF8,0xCA,0x77};

  Quantizor_quantize_result(const Quantizor_quantize_result&);
  Quantizor_quantize_result& operator=(const Quantizor_quantize_result&);
  Quantizor_quantize_result() {
  }

  virtual ~Quantizor_quantize_result() throw();
  Graph success;

  _Quantizor_quantize_result__isset __isset;

  void __set_success(const Graph& val);

  bool operator == (const Quantizor_quantize_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Quantizor_quantize_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Quantizor_quantize_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Quantizor_quantize_result& obj);
};

typedef struct _Quantizor_quantize_presult__isset {
  _Quantizor_quantize_presult__isset() : success(false) {}
  bool success :1;
} _Quantizor_quantize_presult__isset;

class Quantizor_quantize_presult {
 public:

  static const char* ascii_fingerprint; // = "A5E4978334633512AE3DA234B1F8CA77";
  static const uint8_t binary_fingerprint[16]; // = {0xA5,0xE4,0x97,0x83,0x34,0x63,0x35,0x12,0xAE,0x3D,0xA2,0x34,0xB1,0xF8,0xCA,0x77};


  virtual ~Quantizor_quantize_presult() throw();
  Graph* success;

  _Quantizor_quantize_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Quantizor_quantize_presult& obj);
};

class QuantizorClient : virtual public QuantizorIf {
 public:
  QuantizorClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  QuantizorClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void quantize(Graph& _return, const std::string& graphFile, const std::string& method, const int32_t maxSize, const std::vector<double> & params);
  void send_quantize(const std::string& graphFile, const std::string& method, const int32_t maxSize, const std::vector<double> & params);
  void recv_quantize(Graph& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class QuantizorProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<QuantizorIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (QuantizorProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_quantize(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  QuantizorProcessor(boost::shared_ptr<QuantizorIf> iface) :
    iface_(iface) {
    processMap_["quantize"] = &QuantizorProcessor::process_quantize;
  }

  virtual ~QuantizorProcessor() {}
};

class QuantizorProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  QuantizorProcessorFactory(const ::boost::shared_ptr< QuantizorIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< QuantizorIfFactory > handlerFactory_;
};

class QuantizorMultiface : virtual public QuantizorIf {
 public:
  QuantizorMultiface(std::vector<boost::shared_ptr<QuantizorIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~QuantizorMultiface() {}
 protected:
  std::vector<boost::shared_ptr<QuantizorIf> > ifaces_;
  QuantizorMultiface() {}
  void add(boost::shared_ptr<QuantizorIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void quantize(Graph& _return, const std::string& graphFile, const std::string& method, const int32_t maxSize, const std::vector<double> & params) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->quantize(_return, graphFile, method, maxSize, params);
    }
    ifaces_[i]->quantize(_return, graphFile, method, maxSize, params);
    return;
  }

};



#endif
