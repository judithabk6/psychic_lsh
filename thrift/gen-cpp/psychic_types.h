/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef psychic_TYPES_H
#define psychic_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>




class Edge;

class Graph;

typedef struct _Edge__isset {
  _Edge__isset() : dest(false), length(false) {}
  bool dest :1;
  bool length :1;
} _Edge__isset;

class Edge {
 public:

  static const char* ascii_fingerprint; // = "0B663F1913C9C6F43150B524A8B76386";
  static const uint8_t binary_fingerprint[16]; // = {0x0B,0x66,0x3F,0x19,0x13,0xC9,0xC6,0xF4,0x31,0x50,0xB5,0x24,0xA8,0xB7,0x63,0x86};

  Edge(const Edge&);
  Edge& operator=(const Edge&);
  Edge() : dest(0), length(0) {
  }

  virtual ~Edge() throw();
  int32_t dest;
  double length;

  _Edge__isset __isset;

  void __set_dest(const int32_t val);

  void __set_length(const double val);

  bool operator == (const Edge & rhs) const
  {
    if (!(dest == rhs.dest))
      return false;
    if (!(length == rhs.length))
      return false;
    return true;
  }
  bool operator != (const Edge &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Edge & rhs) const{
    return dest < rhs.dest || (dest == rhs.dest && length<rhs.length);
  };

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Edge& obj);
};

void swap(Edge &a, Edge &b);

typedef struct _Graph__isset {
  _Graph__isset() : cluster(false), neighbors(false) {}
  bool cluster :1;
  bool neighbors :1;
} _Graph__isset;

class Graph {
 public:

  static const char* ascii_fingerprint; // = "94DF3A228FA8CE3F91342E0CAE116FCD";
  static const uint8_t binary_fingerprint[16]; // = {0x94,0xDF,0x3A,0x22,0x8F,0xA8,0xCE,0x3F,0x91,0x34,0x2E,0x0C,0xAE,0x11,0x6F,0xCD};

  Graph(const Graph&);
  Graph& operator=(const Graph&);
  Graph() {
  }

  virtual ~Graph() throw();
  std::map<int32_t, std::set<int32_t> >  cluster;
  std::map<int32_t, std::set<Edge> >  neighbors;

  _Graph__isset __isset;

  void __set_cluster(const std::map<int32_t, std::set<int32_t> > & val);

  void __set_neighbors(const std::map<int32_t, std::set<Edge> > & val);

  bool operator == (const Graph & rhs) const
  {
    if (!(cluster == rhs.cluster))
      return false;
    if (!(neighbors == rhs.neighbors))
      return false;
    return true;
  }
  bool operator != (const Graph &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Graph & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Graph& obj);
};

void swap(Graph &a, Graph &b);



#endif
